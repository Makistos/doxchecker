#!/usr/bin/python
# -*- coding: iso-8859-15 -*-

'''
Created on 28 Sep 2011

@author: poutima
'''

import logging
import os
import sys
import getopt
from DoxCheck import Reporter
from DoxLogReader import LogReader
from yaml import load, dump

''' CONSTANTS '''
LOG_FILENAME = 'doxcheck.log'
DEFAULT_CONFIG_FILE = '/dc.cfg'

class Logger(object):
    ''' A small logger that enables printing to a file without changing the print statements.'''
    def __init__(self, logfile):
        self.terminal = sys.stdout
        self.log = open(logfile, "w")
        
    def write(self, message):
        self.terminal.write(message)
        self.log.write(message)

def usage_and_exit():
    ''' Prints help. '''
    print '''Usage:
    -h, --help\tThis help text.
    -c, --config     Configuration to use from dc.cfg.
                     You can also give a value to this and the other four parameters in which case 
                     a configuration is saved by that name.
                     If none of these parameters are supplied, an attempt to open a "LAST" configuration
                     is done. This includes the parameters given in the last run.
                     So after a succesful run you can repeat that without giving any parameters.
    -C, --configfile Name of configuration file, if other than default (dc.cfg in current directory).
    -l, --log        Log file for DoxCheck (default=stdout).
    -o, --output     Output file (default=doxy.log in current dir).
    -w, --warnings   Doxygen warnings file
    -x, --xml        Doxygen XML index file.
    

    This script takes the warnings generated by Doxygen and the XML index file created by it
    as input and outputs an XML file that looks like the Doxygen generated one but with attributes
    denoting missing documentation.
    '''
    
    sys.exit(2)
    
def __selectionTable(config, options):
    ''' 
    Selects the action to take based on user supplied parameters.
    
    Returns ERROR, LOAD_LAST, LOAD_CONFIG, SAVE_LAST_AND_RUN or SAVE_CONFIG_AND_RUN.
    '''
    config_given = 0
    log_given = 0
    xml_given = 0
    output_given = 0
    warn_given = 0
    decision = 0
    retval = 0
    
    for opt, arg in options:
        if opt in ('-c', '--config'):
            conf_name = arg
            config_given = 1
        elif opt in ('-l', '--log'):
            log_given = 1
        elif opt in ('-x', '--xml'):
            xml_given = 1
        elif opt in ('-o', '--output'):
            output_given = 1
        elif opt in ('-w', '--warnings'):
            warn_given = 1
    
    if config_given == 1:
        decision += 1
        if config[conf_name] != None:
            decision +=2 
    else:
        if config != None and len(config) > 0:
            if config['LAST'] != None:
                decision += 2

    if log_given == 1 and xml_given == 1 and output_given == 1 and warn_given == 1:
        decision += 4
    
    DECISION_MAKER = {0: 'ERROR', # No config given, not enough parameters supplied
                      1: 'ERROR', # Config given, but it does not exist, no other parameters given
                      2: 'LOAD_LAST', # No config given, but LAST exists, no other parameters given 
                      3: 'LOAD_CONFIG', # Config given && it exists, no other parameters given
                      4: 'SAVE_LAST_AND_RUN', # No config exists && enough parameters given
                      5: 'SAVE_CONFIG_AND_RUN', # Config given, but it doesn't exist && enough parameters given
                      6: 'SAVE_LAST_AND_RUN', # No config given but LAST exists && enough parameters given
                      7: 'SAVE_CONFIG_AND_RUN'  # Config given && it exists && enough parameters given  
                      } 
    
    return DECISION_MAKER[decision]
    
def __addConfiguration(config, name, warn_file, xml_dir, output_file, log_file):
    ''' Adds or overwrites a configuration to the configuration dictionary. '''    
    config[name] =  {'WARN' : warn_file, 'XML': xml_dir, 'OUTPUT': output_file, 'LOG': log_file}

def __saveConfiguration(config, filename):
    ''' Saves the configuration dictionary to the YAML configuration file. '''
    f = open(filename, "w+")
    f.write(dump(config, default_flow_style=False))
    f.close()

def main(argv):
    curr_path = os.getcwd()
    
    warn_file = ''
    xml_dir = ''
    output_file = ''
    log_file = ''
 
    # Name of the default configuration file
    config_file = curr_path + DEFAULT_CONFIG_FILE
    
    # Includes the dict to hold the config to use
    current_config = {}
    
    # Selected configuration
    configuration = ''
    logging.basicConfig(filename=LOG_FILENAME,
                        format='%(asctime)s %(levelname)s %(message)s',
                        level=logging.DEBUG)
    
    try:
        opts, args = getopt.getopt(argv, 'hc:C:l:x:o:w:', ['help', 'config=', 'configfile=', 'log=', 'xml=', 'output=', 'warnings='])
    except getopt.GetoptError:
        usage_and_exit()

    for opt, arg in opts:
        if opt in ('-h', '--help'):
            usage_and_exit()
        elif opt in ('-c', '--config'):
            configuration = arg
        elif opt in ('-C', '--configfile'):
            config_file = arg
        elif opt in ('-l', '--log'):
            log_file = arg
        elif opt in ('-x', '--xml'):
            xml_dir = arg
        elif opt in ('-o', '--output'):
            output_file = arg
        elif opt in ('-w', '--warnings'):
            warn_file = os.path.normpath(arg)
        else:
            print("Invalid option %s" % (opt))
            usage_and_exit()

    try:
        f = open(config_file, "rw")
    except IOError:
        f = open(config_file, "w+")
    config = load(f)
    f.close()
    if config == None:
            config = {}

    selection = __selectionTable(config, opts)
    if selection == 'ERROR':
        usage_and_exit()
    elif selection == 'LOAD_LAST':
        # We got no parameters but a 'LAST' configuration exists
        current_config = config['LAST']
    elif selection == 'LOAD_CONFIG':
        # We got a configuration but no other parameters, so let's run that configuration
        current_config = config[configuration]
        # Save this configuration as LAST
        __addConfiguration(config, 'LAST', current_config['WARN'], current_config['XML'], current_config['OUTPUT'], current_config['LOG'])
        __saveConfiguration(config, config_file)
        current_config = config[configuration]
    elif selection == 'SAVE_LAST_AND_RUN':
        # We got enough parameters, so let's (over)write 'LAST' and run with these parameters
        __addConfiguration(config, 'LAST', warn_file, xml_dir, output_file, log_file)
        __saveConfiguration(config, config_file)
        current_config = config['LAST']
    elif selection == 'SAVE_CONFIG_AND_RUN':
        # We got a config name && enough parameters, so let's (over)write this config with 
        # the given parameters && run
        __addConfiguration(config, configuration, warn_file, xml_dir, output_file, log_file)
        __saveConfiguration(config, config_file)
        current_config = config[configuration]
    
    if current_config['LOG'] != '':
        sys.stdout = Logger(current_config['LOG'])
    
    log_reader = LogReader.LogReader(logging, current_config['WARN'])
    
    reporter = Reporter(current_config['XML'], log_reader.compounds)
    
    reporter.addIssuesToXml()
        
    reporter.writeXml(current_config['OUTPUT'])
    
    print "\nFinished analysis"
    
if __name__ == '__main__':
    main(sys.argv[1:])
    